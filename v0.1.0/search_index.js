var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = StaticPermutations","category":"page"},{"location":"#StaticPermutations","page":"Home","title":"StaticPermutations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [StaticPermutations]","category":"page"},{"location":"#Base.PermutedDimsArrays.PermutedDimsArray-Union{Tuple{N}, Tuple{p}, Tuple{T}, Tuple{AbstractArray{T,N},Permutation{p,N}}} where N where p where T","page":"Home","title":"Base.PermutedDimsArrays.PermutedDimsArray","text":"PermutedDimsArray(A, perm::AbstractPermutation) -> B\n\nAlternative PermutedDimsArray constructor taking a static permutation.\n\nIn contrast to the base constructors, the returned type is fully inferred here.\n\n\n\n\n\n","category":"method"},{"location":"#Core.Tuple-Union{Tuple{Permutation{p,N} where N}, Tuple{p}} where p","page":"Home","title":"Core.Tuple","text":"Tuple(perm::Permutation)\n\nExtract tuple representation of Permutation.\n\nThe result can be passed to permutedims and PermutedDimsArray.\n\nReturns nothing if perm is a NoPermutation.\n\nExamples\n\njulia> Tuple(Permutation(3, 2, 1))\n(3, 2, 1)\n\njulia> Tuple(NoPermutation()) === nothing\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#StaticPermutations.AbstractPermutation","page":"Home","title":"StaticPermutations.AbstractPermutation","text":"AbstractPermutation\n\nAbstract type representing a compile-time permutation.\n\nSubtypes are Permutation and NoPermutation.\n\n\n\n\n\n","category":"type"},{"location":"#StaticPermutations.NoPermutation","page":"Home","title":"StaticPermutations.NoPermutation","text":"NoPermutation <: AbstractPermutation\n\nRepresents an identity permutation.\n\nIt is functionally equivalent to Permutation(1, 2, 3, ...), and is included for convenience.\n\n\n\n\n\n","category":"type"},{"location":"#StaticPermutations.Permutation","page":"Home","title":"StaticPermutations.Permutation","text":"Permutation{p} <: AbstractPermutation\n\nDescribes a compile-time dimension permutation.\n\nThe type parameter p should be a valid permutation such as (3, 1, 2).\n\n\n\nPermutation(perm::Vararg{Int})\nPermutation(perm::NTuple{N,Int})\n\nConstructs a Permutation.\n\nExample\n\nBoth are equivalent:\n\np1 = Permutation(3, 4)\np2 = Permutation((3, 4))\n\n\n\n\n\n","category":"type"},{"location":"#Base.length-Union{Tuple{Permutation{p,N} where N}, Tuple{p}} where p","page":"Home","title":"Base.length","text":"length(perm::AbstractPermutation)\n\nReturns length of permutation.\n\nFor NoPermutation, returns nothing.\n\nExamples\n\njulia> length(Permutation(3, 2, 1))\n3\n\njulia> length(NoPermutation()) === nothing\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#StaticPermutations.append_to_permutation-Union{Tuple{M}, Tuple{p}, Tuple{Permutation{p,N} where N,Val{M}}} where M where p","page":"Home","title":"StaticPermutations.append_to_permutation","text":"append_to_permutation(p::Permutation, ::Val{M})\n\nAppend M non-permuted dimensions to the given permutation.\n\nExamples\n\njulia> append_to_permutation(Permutation(2, 3, 1), Val(2))\nPermutation(2, 3, 1, 4, 5)\n\njulia> append_to_permutation(NoPermutation(), Val(2))\nNoPermutation()\n\n\n\n\n\n","category":"method"},{"location":"#StaticPermutations.check_permutation-Tuple{Any}","page":"Home","title":"StaticPermutations.check_permutation","text":"check_permutation(perm)\n\nCheck the validity of a Permutation.\n\nThrows ArgumentError if the permutation is invalid.\n\nExamples\n\njulia> check_permutation(Permutation(3, 2, 1))  # no error\n\njulia> check_permutation(NoPermutation())       # no error\n\njulia> check_permutation(Permutation(3, 3, 1))\nERROR: ArgumentError: invalid permutation of dimensions: Permutation(3, 3, 1)\n\n\n\n\n\n","category":"method"},{"location":"#StaticPermutations.identity_permutation-Union{Tuple{Val{N}}, Tuple{N}} where N","page":"Home","title":"StaticPermutations.identity_permutation","text":"identity_permutation(::Val{N})\nidentity_permutation(A::AbstractArray{T,N})\n\nReturns the identity permutation Permutation(1, 2, ..., N).\n\n\n\n\n\n","category":"method"},{"location":"#StaticPermutations.inverse_permutation-Tuple{StaticPermutations.AbstractPermutation}","page":"Home","title":"StaticPermutations.inverse_permutation","text":"inv(p::Permutation)\ninverse_permutation(p::Permutation)\n\nReturns the inverse permutation of p.\n\nFunctionally equivalent to Julia's invperm, with the advantage that the result is a compile time constant.\n\nSee also relative_permutation.\n\nExamples\n\njulia> p = Permutation(2, 3, 1);\n\njulia> q = inverse_permutation(p)\nPermutation(3, 1, 2)\n\njulia> t_orig = (36, 42, 14);\n\njulia> t_perm = permute_indices(t_orig, p)\n(42, 14, 36)\n\njulia> permute_indices(t_perm, q) === t_orig\ntrue\n\n\n\n\n\n\n","category":"method"},{"location":"#StaticPermutations.is_identity_permutation-Tuple{NoPermutation}","page":"Home","title":"StaticPermutations.is_identity_permutation","text":"is_identity_permutation(p::Permutation)\n\nReturns true if p is an identity permutation, i.e. if it is equivalent to (1, 2, 3, ...).\n\njulia> is_identity_permutation(Permutation(1, 2, 3))\ntrue\n\njulia> is_identity_permutation(Permutation(1, 3, 2))\nfalse\n\njulia> is_identity_permutation(NoPermutation())\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#StaticPermutations.permute_indices-Tuple{Tuple,NoPermutation}","page":"Home","title":"StaticPermutations.permute_indices","text":"permute_indices(indices, perm::Permutation)\n\nPermute indices according to a compile-time permutation.\n\nindices may be a Tuple of indices, a CartesianIndex, or a Permutation to be reordered according to perm.\n\nExamples\n\njulia> perm = Permutation(2, 3, 1);\n\njulia> permute_indices((36, 42, 14), perm)\n(42, 14, 36)\n\njulia> permute_indices(CartesianIndex(36, 42, 14), perm)\nCartesianIndex(42, 14, 36)\n\njulia> permute_indices(Permutation(3, 1, 2), perm)\nPermutation(1, 2, 3)\n\n\n\n\n\n","category":"method"},{"location":"#StaticPermutations.prepend_to_permutation-Union{Tuple{M}, Tuple{p}, Tuple{Permutation{p,N} where N,Val{M}}} where M where p","page":"Home","title":"StaticPermutations.prepend_to_permutation","text":"prepend_to_permutation(p::Permutation, ::Val{M})\n\nPrepend M non-permuted dimensions to the given permutation.\n\nExamples\n\njulia> prepend_to_permutation(Permutation(2, 3, 1), Val(2))\nPermutation(1, 2, 4, 5, 3)\n\njulia> prepend_to_permutation(NoPermutation(), Val(2))\nNoPermutation()\n\n\n\n\n\n","category":"method"},{"location":"#StaticPermutations.relative_permutation-Union{Tuple{N}, Tuple{q}, Tuple{p}, Tuple{Permutation{p,N},Permutation{q,N}}} where N where q where p","page":"Home","title":"StaticPermutations.relative_permutation","text":"relative_permutation(x::Permutation, y::Permutation)\n\nGet relative permutation needed to get from x to y. That is, the permutation perm such that permute_indices(x, perm) == y.\n\nThe computation is performed at compile time using generated functions.\n\nExamples\n\njulia> x = Permutation(3, 1, 2);\n\njulia> y = Permutation(2, 1, 3);\n\njulia> perm = relative_permutation(x, y)\nPermutation(3, 2, 1)\n\njulia> permute_indices(x, perm) == y\ntrue\n\n\n\n\n\n","category":"method"}]
}
